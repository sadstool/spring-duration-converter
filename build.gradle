buildscript {
	repositories {
		maven { url 'http://repo.spring.io/plugins-release' }
	}
	dependencies {
		classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
	}
}

apply plugin: 'java'
apply plugin: 'propdeps'
apply plugin: 'application'
apply plugin: 'maven'
apply plugin: 'signing'

mainClassName = ''
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	provided 'org.springframework.boot:spring-boot-starter:1.3.2.RELEASE'
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives javadocJar, sourcesJar
}

uploadArchives {
	repositories {
		mavenDeployer {
			beforeDeployment { MavenDeployment deployment ->
				signing.signPom(deployment)
			}

			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			pom.withXml {
				(asNode().dependencies).forEach {
					it.children().removeAll { it.scope.text() != 'compile' }
				}
			}

			pom.project {
				name "${project.group}:${project.name}"
				packaging 'jar'
				description 'duration converter for spring'
				url 'https://github.com/sadstool/spring-duration-converter'

				scm {
					connection 'scm:git:git://github.com/sadstool/spring-duration-converter.git'
					developerConnection 'scm:git:git@github.com:sadstool/spring-duration-converter.git'
					url 'https://github.com/sadstool/spring-duration-converter'
				}

				licenses {
					license {
						name 'The Apache License, Version 2.0'
						url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}

				developers {
					developer {
						name 'sadstool'
						email 'sad.stool@gmail.com'
					}
				}
			}
		}
	}
}

uploadArchives.dependsOn build

[distZip, distTar].each { task ->
	configurations.archives.artifacts.removeAll
			{ it.class.simpleName == "ArchivePublishArtifact" && it.archiveTask == task }
	task.enabled = false
}

signing {
	sign configurations.archives
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.9'
}
